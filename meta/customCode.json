{
  "addedCode": {
    "standard": {
      ".gitignore": {
        "path": ".gitignore",
        "extra": "\n"
      },
      "README.md": {
        "path": "README.md",
        "beginning": "\n",
        "description": "\nsimple interactive menus using inquirer\n\n![](src/custom/images/choicebrew.gif)\n",
        "afterDescription": "\n",
        "badges": "\n\n[//]: # ( ns__start_section usageSection )\n\n[![Version](https://img.shields.io/npm/v/choicebrew.svg)](https://npmjs.org/package/choicebrew)\n[![Downloads/week](https://img.shields.io/npm/dw/choicebrew.svg)](https://npmjs.org/package/choicebrew)\n[![License](https://img.shields.io/npm/l/choicebrew.svg)](https://github.com/YizYah/choicebrew/blob/master/package.json)\n",
        "APIIntro": "\n# Why\nThe inquirer package is great for directed interactive sequences, but a CLI menu requires looping and maintaining some context.  It's easy to end up with spaghetti code trying to handle nested submenus.\n\n# What\nA pair of functions and some types to organize your ts code.\n* A `Choice` is fundamentally a named `ChoiceCallback` (any function you'd like to execute when the user chooses it.)\n* a `ChoiceGenerator` takes in a context (any object you'd like) and returns a Choice.  \n* `menu()` takes as a parameter your own ChoiceGenerator.\n* Every menu will automatically add a choice to exit the menu if you don't add it yourself. But you can override it yourself by offering a Choice with `FlowType` set to `FlowTypes.back`.\n\n# API\n",
        "constantsIntro": "\n## General Constants and Commands\n",
        "typeIntro": "\n## Types\nThe following types and interfaces are exposed by choicebrew.\n"
      },
      "src/index.ts": {
        "path": "src/index.ts",
        "beginning": "\n",
        "export": "\n    // replace this with your own\n    "
      },
      "test/index.test.ts": {
        "path": "test/index.test.ts",
        "customImports": "\n",
        "general": "\ntest('general', t => {\n  // replace with whatever you'd like.  To start over with the default, remove everything including the\n  t.not(typeof output.functions.menu, \"undefined\")\n});\n"
      }
    },
    "static-grouping": {
      "functions.ts": {
        "path": "src/groupings/functions.ts",
        "helpers": "\n",
        "menu": "\n    require('../custom/menu').menu,\n    ",
        "getValue": "\n    require('../custom/menu').getValue,\n    ",
        "setFlow": "\n    require('../custom/menu').setFlow,\n    "
      },
      "functions.test.ts": {
        "path": "test/groupings/functions.test.ts",
        "customImports": "\n",
        "tests": "\ntest('functions', t => {\n// update this as you update functions\n  t.is(typeof functions.getValue, \"function\")\n  t.is(typeof functions.setFlow, \"function\")\n  t.is(typeof functions.menu, \"function\")\n});\n"
      }
    },
    "static-typeCategory": {
      "constants.ts": {
        "path": "src/types/constants.ts",
        "helpers": "\nimport {ChoiceCallback} from './functionTypes'\n",
        "FlowType": "\n  back = 'BACK',\n  command = 'COMMAND',\n  ",
        "SelectedInfo": "\n  flow: FlowType;\n  value?: any;\n  ",
        "MenuAnswers": "\n  selected: SelectedInfo;\n  ",
        "Choice": "\n  flow: FlowType;\n  name: string;\n  description?: string;\n  value?: any;\n  short?: string;\n  callback?: ChoiceCallback;\n\n  ",
        "extraExports": "\n"
      },
      "functionTypes.ts": {
        "path": "src/types/functionTypes.ts",
        "helpers": "\nimport {Choice, MenuAnswers} from './constants'\n",
        "ChoicesGenerator": "\n  (context: any) => Choice[]\n",
        "ChoiceCallback": "\n  (context: any, answers: MenuAnswers) => any\n",
        "extraExports": "\n"
      }
    }
  },
  "replacedCode": {},
  "removedCode": {}
}
