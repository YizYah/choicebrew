{".gitignore":{"unit":"standard","comp":".gitignore","addedCode":{"extra":"\n"},"replacedCode":{},"removedCode":{}},"README.md":{"unit":"standard","comp":"README.md","addedCode":{"beginning":"\n","description":"\nsimple interactive menus using inquirer\n\n![](src/custom/images/choicebrew.gif)\n","afterDescription":"\n","badges":"\n\n[//]: # ( ns__start_section usageSection )\n\n[![Version](https://img.shields.io/npm/v/choicebrew.svg)](https://npmjs.org/package/choicebrew)\n[![Downloads/week](https://img.shields.io/npm/dw/choicebrew.svg)](https://npmjs.org/package/choicebrew)\n[![License](https://img.shields.io/npm/l/choicebrew.svg)](https://github.com/YizYah/choicebrew/blob/master/package.json)\n","APIIntro":"\n# Why\nThe inquirer package is great for directed interactive sequences, but a CLI menu requires looping and maintaining some context.  It's easy to end up with spaghetti code trying to handle nested submenus.\n\n# What\nA pair of functions and some types to organize your ts code.\n* A `Choice` is fundamentally a named `ChoiceCallback` (any function you'd like to execute when the user chooses it.)\n* a `ChoiceGenerator` takes in a context (any object you'd like) and returns a Choice.  \n* `menu()` takes as a parameter your own ChoiceGenerator.\n* Every menu will automatically add a choice to exit the menu if you don't add it yourself. But you can override it yourself by offering a Choice with `FlowType` set to `FlowTypes.back`.\n\n# API\n","constantsIntro":"\n## General Constants and Commands\n","typeIntro":"\n## Types\nThe following types and interfaces are exposed by choicebrew.\n"},"replacedCode":{},"removedCode":{}},"src/index.ts":{"unit":"standard","comp":"src/index.ts","addedCode":{"beginning":"\n","export":"\n    // replace this with your own\n    "},"replacedCode":{},"removedCode":{}},"test/index.test.ts":{"unit":"standard","comp":"test/index.test.ts","addedCode":{"customImports":"\n","general":"\ntest('general', t => {\n  // replace with whatever you'd like.  To start over with the default, remove everything including the\n  t.not(typeof output.functions.menu, \"undefined\")\n});\n"},"replacedCode":{},"removedCode":{}},"src/groupings/functions.ts":{"unit":"static-grouping","comp":"functions.ts","addedCode":{"helpers":"\n","menu":"\n    require('../custom/menu').menu,\n    ","getValue":"\n    require('../custom/menu').getValue,\n    ","setFlow":"\n    require('../custom/menu').setFlow,\n    "},"replacedCode":{},"removedCode":{}},"test/groupings/functions.test.ts":{"unit":"static-grouping","comp":"functions.test.ts","addedCode":{"customImports":"\n","tests":"\ntest('functions', t => {\n// update this as you update functions\n  t.is(typeof functions.getValue, \"function\")\n  t.is(typeof functions.setFlow, \"function\")\n  t.is(typeof functions.menu, \"function\")\n});\n"},"replacedCode":{},"removedCode":{}},"src/types/constants.ts":{"unit":"static-typeCategory","comp":"constants.ts","addedCode":{"helpers":"\nimport {ChoiceCallback} from './functionTypes'\n","FlowType":"\n  back = 'BACK',\n  command = 'COMMAND',\n  ","SelectedInfo":"\n  flow: FlowType;\n  value?: any;\n  ","MenuAnswers":"\n  selected: SelectedInfo;\n  ","Choice":"\n  flow: FlowType;\n  name: string;\n  description?: string;\n  value?: any;\n  short?: string;\n  callback?: ChoiceCallback;\n\n  ","extraExports":"\n"},"replacedCode":{},"removedCode":{}},"src/types/functionTypes.ts":{"unit":"static-typeCategory","comp":"functionTypes.ts","addedCode":{"helpers":"\nimport {Choice, MenuAnswers} from './constants'\n","ChoicesGenerator":"\n  (context: any) => Choice[]\n","ChoiceCallback":"\n  (context: any, answers: MenuAnswers) => any\n","extraExports":"\n"},"replacedCode":{},"removedCode":{}}}
